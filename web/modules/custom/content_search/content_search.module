<?php

/**
 * @file
 * Contains content_search.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\content_search\ContentSearchAdminManager;
use Drupal\Core\Entity\EntityInterface;
use Elasticsearch\Common\Exceptions\NoNodesAvailableException;

/**
 * Implements hook_help().
 */
function content_search_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the content_search module.
    case 'help.page.content_search':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Contains search functionality using elasticsearch') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function content_search_theme($existing, $type, $theme, $path) {
  return [
    'header_search_block' => [
      'variables' => [
        'form' => [],
      ],
    ],
    'search_results_block' => [
      'variables' => [
        'data' => [],
        'pager' => [
          '#type' => 'pager',
          '#quantity' => 5,
        ],
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_admin_block_content().
 *
 * Removes default search config page's menu entry.
 */
function content_search_preprocess_admin_block_content(&$variables) {
  if (isset($variables['content']['49990 Search pages entity.search_page.collection'])) {
    unset($variables['content']['49990 Search pages entity.search_page.collection']);
  }
}

/**
 * Implements hook_entity_insert().
 *
 * Update content index along with CRUD operations.
 */
function content_search_node_insert(EntityInterface $node) {
  if (in_array($node->getType(), ContentSearchAdminManager::INDEXABLE_NODE_TYPES)) {
    try {
      $content_search_admin_manager = Drupal::service('content_search.admin_manager');
      $content_search_admin_manager->createDocument($node);
    }
    catch (NoNodesAvailableException $ex) {
      drupal_set_message('Node index record could not be created, Elasticsearch offline.', 'error');
    }
  }
}

/**
 * Implements hook_entity_update().
 *
 * Update content index along with CRUD operations.
 */
function content_search_node_update(EntityInterface $node) {
  if (in_array($node->getType(), ContentSearchAdminManager::INDEXABLE_NODE_TYPES)) {
    try {
      $content_search_admin_manager = Drupal::service('content_search.admin_manager');
      $content_search_admin_manager->deleteDocument($node);
      $content_search_admin_manager->createDocument($node);
    }
    catch (NoNodesAvailableException $ex) {
      drupal_set_message('Node index record could not be updated, Elasticsearch offline.', 'error');
    }
  }
}

/**
 * Implements hook_entity_delete().
 *
 * Update content index along with CRUD operations.
 */
function content_search_node_delete(EntityInterface $node) {
  if (in_array($node->getType(), ContentSearchAdminManager::INDEXABLE_NODE_TYPES)) {
    try {
      $content_search_admin_manager = Drupal::service('content_search.admin_manager');
      $content_search_admin_manager->deleteDocument($node);
    }
    catch (NoNodesAvailableException $ex) {
      drupal_set_message('Node index record could not deleted, Elasticsearch offline.', 'error');
    }
  }
}
